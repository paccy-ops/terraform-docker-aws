name: CI/CD with Terraform
on:
  push:
    branches:
      - testing-actions-flows
env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLICK_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  AWS_REGION: ap-southeast-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{steps.set-ip.outputs.app_exmple_public_id}}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v1
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ./terraform
      - name: Terraform Plan
        run: terraform plan -var="public_key=$PUBLICK_SSH_KEY" -var="private_key=$PRIVATE_SSH_KEY" -out=PLAN
        working-directory: ./terraform
      - name: Terraform apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: set output
        id: set-ip
        run: |-
          echo "::set-output name=app_exmple_public_id::$(terraform output app_exmple_public_id)"
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run : echo SERVER_PUBLIC_IP=${{needs.deploy-infra.outputs.SERVER_PUBLIC_IP}} >> $GITHUB_ENV
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-terraform-node-app
          IMAGE_TG: ${{ github.sha }}
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-terraform-node-app
          IMAGE_TG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ap-southeast-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TG,AWS_ACCESS_KEY,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION
          scripts: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli-y
            sudo ${aws ecr get-login --no-include-email --region ap-southeast-1};
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainerc -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG



